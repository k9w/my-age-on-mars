This plaintext document outlines my thought process while designing
this application.

Solar-year = 365 Earth-days

Let's not consider leap years. In fact we'll only work with units of
years, not days.


Expected input:

 - User's age

 - User's life expectancy

 - User does not pick a planet


For each planet listed in the next section below, output this:

 - The user's age in that planet's years.

 - The user's years remaining to live, based on that planet's
   years. OR

 - The user's years lived past their life expectancy, based on that
   planet's years.


property, age earth years


property, age on different planet

will update them both

display them


To achieve that, do this:

Define a class object constructor PlanetOrbits with the following
properties and values as constants.

Planet 	       Planet's year in Earth years

Mercury	        0.24
Venus	        0.62
Mars	        1.88
Jupiter	       11.86


Define a class object constructor UserAgeAndLifeExpectancy with
initial properties:

 - userAge

 - lifeExpectancy

 - yearsRemaining = lifeExpectancy - userAge

 - yearsPastExpectancy = userAge - lifeExpectancy


function checkIfOlderThanLifeExpectancy(userAge,lifeExpectancy)
  yearsRemaining = lifeExpectancy - userAge
  yearsPastExpectancy = userAge - lifeExpectancy
  yearsLeftOrBeyond
  If yearsRemaining === a positive number
    return yearsRemaining
    yearsLeftOrBeyond = "years left to live"
  else
    return yearsPastExpectancy
    yearsLeftOrBeyond = "years beyond your life expectancy"

function convertAgeAndExpectancyToPlanetChosen(userAge, yearsLeftOrBeyond)
  variable convertedAge = userAge * planetOrbits.planetChosen
  variable convertedExpectancy = lifeExpectancy * planetOrbits.planetChosen

function showAgeAndExpectancyInYearsOfPlanetChosen(userAge,lifeExpectancy,planetChosen)
  variable yearsLeftOrBeyond = checkIfOlderThanLifeExpectancy(userAge,lifeExpectancy)
  convertAgeAndExpectancyToPlanetChosen(userAge, yearsLeftOrBeyond)
  variable result = "You are ${converedAge} ${planetChosen} years young and have ${convertedExpectancy} ${yearsLeftOrBeyond}.

For example:
"You are 45 Mars years young and have 55 Mars years left to live."
Or:
"You are 105 Mars years young and have 5 Mars years beyond your life expectancy."

For document ready function:

When the form submit button is clicked, do the following:

Instantiate a class object planetOrbits from its constructor.
Instantiate a class object userAgeAndLifeExpectancy from its
constructor.

Declare a variable planetChosen and set it equal to the input of planet-chosen


[older planning is below]


Define a method convertEarthYearsToOtherPlanetYears to loop through
each of these inputs:

 - userAgeInput

 - userLifeExpectancyInput

 - userEarthYearsRemainingToLive OR

 - earthYearsLivedPastTheLifeExpectancy

For each planet, multiply or divide the number value by the constant
stored for that planet property in object planetOrbits.


For example, here is how it would look with
 userEarthYearsRemainingToLive:

Mercury:

 - ageInMercuryYears

 - mercuryYearsRemainingToLive


Venus:

 - ageInVenusYears

 - venusYearsRemainingToLive


Mars:

 - ageInMarsYears

 - marsYearsRemainingToLive


Jupiter:

 - ageInJupiterYears

 - jupiterYearsRemainingToLive


As a second example, here is how it would look with
earthYearsLivedPastTheLifeExpectancy:


Mercury:

 - ageInMercuryYears

 - mercuryYearsLivedPastTheLifeExpectancy


Venus:

 - ageInVenusYears

 - venusYearsLivedPastTheLifeExpectancy


Mars:

 - ageInMarsYears

 - marsYearsLivedPastTheLifeExpectancy


Jupiter:

 - ageInJupiterYears

 - jupiterYearsLivedPastTheLifeExpectancy


As the loop progresses, add each variable and value as a new property
to the object userAgeAndLifeExpectancy.


Display the results to the user.
